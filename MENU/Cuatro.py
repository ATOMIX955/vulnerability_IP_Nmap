try:
	from time import sleep
	from os import system
	import emoji
except:
	os.system("pip install emoji")
	
def Escaneo():
			print("""\n
\033[0;31m[ \U0001F914\033[1;30mSi quieres realizar un escaneo rápido de puertos a un determinado host, debemos teclear el siguiente comando. Este comando básico se encargará de escanear los principales puertos a la dirección IP privada o pública definida, un detalle muy importante es que no escaneará todos los puertos, sino los más utilizados habitualmente. \033[0;31m\U0001F92F ]
			
			""")
			ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
			print("\033[1;37m")
			system(f"nmap {ip}")
			sleep(6)
			
			system("clear")
				
def Realizar():
	print("""\n
\033[0;31m[ \U0001F914\033[1;30mEn lugar de realizar un escaneo de todos los puertos, podemos establecer un rango de puertos a comprobar. Para ello ejecutaremos \033[0;31m\U0001F92F ]
				
				""")
	rango= input("""\n     \033[0;35m[✓]\033[1;32m Rango \033[1;30m>>\033[40m\033[35m """)
	
	print("""\n
\033[0;31m[ \U0001F914\033[1;30mSi queremos realizar un escaneo de puertos desde el 20 TCP hasta el 200 TCP en la dirección IP 192.168.1.2, basta con ejecutar la siguiente orden \033[0;31m\U0001F92F ]
				
				""")
	
	ip= input("""\033[0;35m				                                                   [✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
	print("\033[1;37m")
	system(f"nmap -p {rango} {ip}")
	sleep(6)
	system("clear")
				

def Detectar():
			print("""\n
\033[0;31m[ \U0001F914\033[1;30mPodemos indicar a Nmap que detecte el sistema operativo. Esto lo realiza enviando paquetes y analizando la forma en que los devuelve, siendo en cada sistema totalmente diferente. Junto a esto, realizará una exploración de puertos y de los servicios en busca de vulnerabilidades. Asimismo, el escaneo devolverá información útil. Para ello debemos ejecutar \033[0;31m\U0001F92F ]
				
				""")
			ip= input("""\033[0;35m				                                                   [✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
			print("\033[1;37m")
			system(f"nmap -A -v {ip}")
			sleep(6)
			system("clear")	
				
def Subred():
			print("""
\033[0;31m[ \U0001F914\033[1;30mPodremos obtener los puertos abiertos de cada equipo (encendido, se entiende) de una subred mediante el siguiente comando ejem 192.168.1.* \033[0;31m\U0001F92F ]
			""")
			ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
			print("\033[1;37m")
			system(f"nmap {ip}")
			sleep(6)
			system("clear")
				
def archivo():
			print("""
\033[0;31m[ \U0001F914\033[1;30mMediante una de las opciones que nos ofrece nmap, podremos realizar el escaneo de varios host o equipos desde un fichero en el que los tenemos almacenados. Muy útil si vamos tomando notas de varios equipos que queremos escanear y realizar dicho escaneo en un momento determinado (por ejemplo en un momento de máxima actividad o por el contrario en un momento donde la carga de trabajo sea mínima \033[0;31m\U0001F92F ]
			""")
			ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
			print("\033[1;37m")
			system(f"nmap -iL {ip}")
			sleep(6)
			system("clear")
			

def Firewall():
			print("""
\033[0;31m[ \U0001F914\033[1;30mCon el siguiente comando comprobaremos si el objetivo tiene activo algún filtrado de paquetes o Firewall \033[0;31m\U0001F92F]
			""")
			ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
			print("\033[1;37m")
			system(f"nmap -sA {ip}")
			sleep(6)
			system("clear")
			
def red():
			print("""
\033[0;31m[ \U0001F914\033[1;30mCon Nmap podemos encontrar qué equipos están encendidos en nuestra red, evitando (en caso de tratarse una red muy extensa) largas esperas si aplicásemos el mapeado a toda la red o que incluyese otras características ejemplo   192.168.1.* \033[0;31m\U0001F92F ]
			""")
			ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
			print("\033[1;37m")
			system(f"nmap -sP  {ip}")
			sleep(6)
			system("clear")	
			
def rapido():
			print("""
\033[0;31m[ \U0001F914\033[1;30mnos permitirá realizar un escaneo rápido por los puertos más usados comúnmente.\033[0;31m\U0001F92F ]
			""")
			ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
			print("\033[1;37m")
			system(f"nmap -F  {ip}")
			sleep(6)
			system("clear")	
			
def ordenado():
			print("""
\033[0;31m[ \U0001F914\033[1;30mSi por alguna razón queremos obtener la lista de puertos ordenados en orden creciente \033[0;31m\U0001F92F ]
			""")
			ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
			print("\033[1;37m")
			system(f"nmap -r  {ip}")
			sleep(6)
			system("clear")		
			
def interfaces():
			print("""\n
\033[0;31m[ \U0001F914\033[1;30mCon Nmap podemos listar todas las interfaces de red del equipo desde el que realizamos el mapeado, así como las rutas que siguie \033[0;31m\U0001F92F ]
			\n""")
			print("\033[1;37m")
			
			system("nmap --iflist")
			sleep(6)
			system("clear")		

			
def UDP():
			print("""\n
\033[0;31m[ \U0001F914\033[1;30mOtra forma de especificar un escaneo haciendo uso de UDP \033[0;31m\U0001F92F ]
			""")
			ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
			print("\033[1;37m")
			
			system("nmap -sU {ip}")
			sleep(6)
			system("clear")	
			
def servicios():
			print("""\n
\033[0;31m[ \U0001F914\033[1;30mCon el siguiente comando obtendremos la versión actual del servicio que corre por cada puerto que encontremos que responda. Muy útil si estamos realizando un escáner de vulnerabilidades o un control de versiones para implantar la misma versión de un servicio o aplicación en todos los equipos de la red \033[0;31m\U0001F92F ]
			""")
			ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
			print("\033[1;37m")
			
			system("nmap -sV {ip}")
			sleep(6)
			system("clear")				
																				
																			
def S_O():
			print("""\n
\033[0;31m[ \U0001F914\033[1;30mPara obtener información del sistema operativo de un host\033[0;31m\U0001F92F ]
			""")
			ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
			print("\033[1;37m")
			
			system("nmap -O {ip}")
			sleep(6)
			
			print("""\n
\033[0;31m[ \U0001F914\033[1;30mCon Nmap también podremos saber qué sistema operativo gobierna el equipo objetivo así como el traceroute de sus paquetes \033[0;31m\U0001F92F ]
\n""")

			
			print("\033[1;37m")
			system("nmap -A {ip}")
			sleep(7)
			system("clear")		
			
def varios():
	print("""\n
\033[0;31m[ \U0001F914\033[1;30mLa sintaxis para definir varios puertos sobre los que centrar el mapeado ya la hemos visto en ejemplos anteriores, indicándolos antes del target u objetivo, separados por comas \033[0;31m\U0001F92F ]
			""")
	ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
	puerto = input("""\n     \033[0;35m[✓]\033[1;32m Puerto \033[1;30m>> \033[40m\033[35m""")
	
	print("\033[1;37m")
	system("nmap -p {puerto} {ip}")
	sleep(7)
	system("clear")

def Ejecutar():
	print("""\n
\033[0;31m[ \U0001F914\033[1;30mCon la siguiente línea de comando realizaremos un examen exhaustivo sobre el objetivo, aplicando todos los tipos de mapeado que contiene la aplicación para un informe detallado. La desventaja es la lentitud al tener que probar todas las combinaciones \033[0;31m\U0001F92F ]
			""")
	ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
	
	print("\033[1;37m")
	system("nmap -sS {ip}")
	sleep(6)
	system("clear")		

def TCP():
	print("""\n
\033[0;31m[ \U0001F914\U0001F914\033[1;30mPara enviar un paquete de solicitud de respuesta (Syn) a todos los puertos de un objetivo, con lo que obtendremos respuesta incluso de aquellos puertos que mediante firewall rechazasen contestar a un paquete ping, por ejemplo, usaremos la siguiente orden \033[0;31m\U0001F92F ]
			""")
	ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
	
	print("\033[1;37m")
	system("nmap -sT {ip}")
	sleep(6)
	system("clear")			

def ARP():
	print("""\n
\033[0;31m[ \U0001F914\033[1;30mTambién podremos realizar un mapeado ARP a base de usar el protocolo ping sobre la IP objetivo, mediante la siguiente línea \033[0;31m\U0001F92F ]
			""")
	ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
	print("\033[1;37m")
	system("nmap -PR {ip}")
	sleep(6)
	system("clear")
	
def análisis():
	print("""\n
\033[0;31m[ \U0001F914\033[1;30mConsiderado uno de los métodos de mapeado más intrusivos, se centra primeramente en escanear la red en busca de equipos activos, tras lo que realizará diversas peticiones, ajustándolas en tipo a los servicios más usados en cada puerto, para obtener mayor probabilidad de respuesta y un informe más completo y detallado de los equipos objetivo \033[0;31m\U0001F92F ]
			""")
	ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
	print("\033[1;37m")
	system("nmap -sN {ip}")
	sleep(6)
	system("clear")
	
def escáneres():
	print("""\n
\033[0;31m[ \U0001F914\033[1;30mA continuación os dejo uno de los mapeados que se pueden realizar sobre una instalación, abarcando todas las redes (de una instalación por defecto con IPs de clase C), equipos y puertos que se encuentren activos \033[0;31m\U0001F92F ]
			""")
	ip = input("""\n     \033[0;35m[✓]\033[1;32m IP \033[1;30m>>\033[40m\033[35m """)
	print("\033[1;37m")
	system("nmap -sS -n -v -O -p 1-65535 {ip}/24")
	sleep(6)
	system("clear")

def versión():
	print("""\n
\033[0;31m[ \U0001F914\033[1;30mPara comprobar qué versión de Nmap\033[0;31m\U0001F92F ]
			\n""")
			
	
	
	print("\033[1;37m")
	system("nmap -V ")
	sleep(6)
	system("clear")												